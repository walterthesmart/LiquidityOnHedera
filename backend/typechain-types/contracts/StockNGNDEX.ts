/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StockNGNDEX {
  export type DEXConfigStruct = {
    defaultFeeRate: BigNumberish;
    maxPriceImpact: BigNumberish;
    minLiquidity: BigNumberish;
    swapDeadline: BigNumberish;
    emergencyMode: boolean;
  };

  export type DEXConfigStructOutput = [
    defaultFeeRate: bigint,
    maxPriceImpact: bigint,
    minLiquidity: bigint,
    swapDeadline: bigint,
    emergencyMode: boolean
  ] & {
    defaultFeeRate: bigint;
    maxPriceImpact: bigint;
    minLiquidity: bigint;
    swapDeadline: bigint;
    emergencyMode: boolean;
  };

  export type LiquidityPositionStruct = {
    ngnAmount: BigNumberish;
    stockAmount: BigNumberish;
    liquidityTokens: BigNumberish;
    timestamp: BigNumberish;
    rewardDebt: BigNumberish;
  };

  export type LiquidityPositionStructOutput = [
    ngnAmount: bigint,
    stockAmount: bigint,
    liquidityTokens: bigint,
    timestamp: bigint,
    rewardDebt: bigint
  ] & {
    ngnAmount: bigint;
    stockAmount: bigint;
    liquidityTokens: bigint;
    timestamp: bigint;
    rewardDebt: bigint;
  };

  export type TradingPairStruct = {
    stockToken: AddressLike;
    ngnReserve: BigNumberish;
    stockReserve: BigNumberish;
    totalLiquidity: BigNumberish;
    feeRate: BigNumberish;
    isActive: boolean;
    lastUpdateTime: BigNumberish;
    priceImpactLimit: BigNumberish;
  };

  export type TradingPairStructOutput = [
    stockToken: string,
    ngnReserve: bigint,
    stockReserve: bigint,
    totalLiquidity: bigint,
    feeRate: bigint,
    isActive: boolean,
    lastUpdateTime: bigint,
    priceImpactLimit: bigint
  ] & {
    stockToken: string;
    ngnReserve: bigint;
    stockReserve: bigint;
    totalLiquidity: bigint;
    feeRate: bigint;
    isActive: boolean;
    lastUpdateTime: bigint;
    priceImpactLimit: bigint;
  };
}

export interface StockNGNDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BASIS_POINTS"
      | "DEFAULT_ADMIN_ROLE"
      | "LIQUIDITY_PROVIDER_ROLE"
      | "MINIMUM_LIQUIDITY"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "PRICE_PRECISION"
      | "addLiquidity"
      | "allStockTokens"
      | "collectedFees"
      | "config"
      | "createTradingPair"
      | "emergencyWithdraw"
      | "getAllStockTokens"
      | "getCurrentPrice"
      | "getDEXStats"
      | "getLiquidityPosition"
      | "getPriceHistory"
      | "getQuoteNGNToStock"
      | "getQuoteStockToNGN"
      | "getRoleAdmin"
      | "getTradingPair"
      | "grantRole"
      | "hasRole"
      | "lastPrice"
      | "liquidityPositions"
      | "ngnToken"
      | "pause"
      | "paused"
      | "priceHistory"
      | "removeLiquidity"
      | "renounceRole"
      | "revokeRole"
      | "supportedStockTokens"
      | "supportsInterface"
      | "swapNGNForStock"
      | "swapStockForNGN"
      | "totalFeesCollected"
      | "tradingPairs"
      | "unpause"
      | "updateDEXConfig"
      | "updateTradingPair"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyAction"
      | "FeesCollected"
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "Paused"
      | "PriceUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SwapExecuted"
      | "TradingPairCreated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allStockTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createTradingPair",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDEXStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPosition",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteNGNToStock",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteStockToNGN",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ngnToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedStockTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNGNForStock",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapStockForNGN",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDEXConfig",
    values: [StockNGNDEX.DEXConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTradingPair",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTradingPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDEXStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteNGNToStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteStockToNGN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ngnToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedStockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNGNForStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapStockForNGN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDEXConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTradingPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [
    action: string,
    target: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [action: string, target: string, amount: bigint];
  export interface OutputObject {
    action: string;
    target: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [stockToken: AddressLike, amount: BigNumberish];
  export type OutputTuple = [stockToken: string, amount: bigint];
  export interface OutputObject {
    stockToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    provider: AddressLike,
    stockToken: AddressLike,
    ngnAmount: BigNumberish,
    stockAmount: BigNumberish,
    liquidityTokens: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    stockToken: string,
    ngnAmount: bigint,
    stockAmount: bigint,
    liquidityTokens: bigint
  ];
  export interface OutputObject {
    provider: string;
    stockToken: string;
    ngnAmount: bigint;
    stockAmount: bigint;
    liquidityTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    provider: AddressLike,
    stockToken: AddressLike,
    ngnAmount: BigNumberish,
    stockAmount: BigNumberish,
    liquidityTokens: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    stockToken: string,
    ngnAmount: bigint,
    stockAmount: bigint,
    liquidityTokens: bigint
  ];
  export interface OutputObject {
    provider: string;
    stockToken: string;
    ngnAmount: bigint;
    stockAmount: bigint;
    liquidityTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    stockToken: AddressLike,
    newPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    stockToken: string,
    newPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    stockToken: string;
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    stockToken: AddressLike,
    ngnToStock: boolean,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stockToken: string,
    ngnToStock: boolean,
    amountIn: bigint,
    amountOut: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    user: string;
    stockToken: string;
    ngnToStock: boolean;
    amountIn: bigint;
    amountOut: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingPairCreatedEvent {
  export type InputTuple = [
    stockToken: AddressLike,
    initialNGNReserve: BigNumberish,
    initialStockReserve: BigNumberish,
    feeRate: BigNumberish
  ];
  export type OutputTuple = [
    stockToken: string,
    initialNGNReserve: bigint,
    initialStockReserve: bigint,
    feeRate: bigint
  ];
  export interface OutputObject {
    stockToken: string;
    initialNGNReserve: bigint;
    initialStockReserve: bigint;
    feeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StockNGNDEX extends BaseContract {
  connect(runner?: ContractRunner | null): StockNGNDEX;
  waitForDeployment(): Promise<this>;

  interface: StockNGNDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  LIQUIDITY_PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  MINIMUM_LIQUIDITY: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [
      stockToken: AddressLike,
      ngnAmount: BigNumberish,
      stockAmount: BigNumberish,
      minLiquidityOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  allStockTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  collectedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        defaultFeeRate: bigint;
        maxPriceImpact: bigint;
        minLiquidity: bigint;
        swapDeadline: bigint;
        emergencyMode: boolean;
      }
    ],
    "view"
  >;

  createTradingPair: TypedContractMethod<
    [
      stockToken: AddressLike,
      initialNGNAmount: BigNumberish,
      initialStockAmount: BigNumberish,
      feeRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllStockTokens: TypedContractMethod<[], [string[]], "view">;

  getCurrentPrice: TypedContractMethod<
    [stockToken: AddressLike],
    [bigint],
    "view"
  >;

  getDEXStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPairs: bigint;
        totalVolumeNGN: bigint;
        feesCollected: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;

  getLiquidityPosition: TypedContractMethod<
    [user: AddressLike, stockToken: AddressLike],
    [StockNGNDEX.LiquidityPositionStructOutput],
    "view"
  >;

  getPriceHistory: TypedContractMethod<
    [stockToken: AddressLike],
    [bigint[]],
    "view"
  >;

  getQuoteNGNToStock: TypedContractMethod<
    [stockToken: AddressLike, ngnAmountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        stockAmountOut: bigint;
        fee: bigint;
        priceImpact: bigint;
      }
    ],
    "view"
  >;

  getQuoteStockToNGN: TypedContractMethod<
    [stockToken: AddressLike, stockAmountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        ngnAmountOut: bigint;
        fee: bigint;
        priceImpact: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTradingPair: TypedContractMethod<
    [stockToken: AddressLike],
    [StockNGNDEX.TradingPairStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastPrice: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  liquidityPositions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        ngnAmount: bigint;
        stockAmount: bigint;
        liquidityTokens: bigint;
        timestamp: bigint;
        rewardDebt: bigint;
      }
    ],
    "view"
  >;

  ngnToken: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  priceHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      stockToken: AddressLike,
      liquidityAmount: BigNumberish,
      minNGNOut: BigNumberish,
      minStockOut: BigNumberish
    ],
    [[bigint, bigint] & { ngnOut: bigint; stockOut: bigint }],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedStockTokens: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapNGNForStock: TypedContractMethod<
    [
      stockToken: AddressLike,
      ngnAmountIn: BigNumberish,
      minStockAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapStockForNGN: TypedContractMethod<
    [
      stockToken: AddressLike,
      stockAmountIn: BigNumberish,
      minNGNAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  tradingPairs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        stockToken: string;
        ngnReserve: bigint;
        stockReserve: bigint;
        totalLiquidity: bigint;
        feeRate: bigint;
        isActive: boolean;
        lastUpdateTime: bigint;
        priceImpactLimit: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDEXConfig: TypedContractMethod<
    [newConfig: StockNGNDEX.DEXConfigStruct],
    [void],
    "nonpayable"
  >;

  updateTradingPair: TypedContractMethod<
    [
      stockToken: AddressLike,
      feeRate: BigNumberish,
      priceImpactLimit: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [stockToken: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIQUIDITY_PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_LIQUIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      ngnAmount: BigNumberish,
      stockAmount: BigNumberish,
      minLiquidityOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allStockTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        defaultFeeRate: bigint;
        maxPriceImpact: bigint;
        minLiquidity: bigint;
        swapDeadline: bigint;
        emergencyMode: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTradingPair"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      initialNGNAmount: BigNumberish,
      initialStockAmount: BigNumberish,
      feeRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllStockTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[stockToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDEXStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPairs: bigint;
        totalVolumeNGN: bigint;
        feesCollected: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityPosition"
  ): TypedContractMethod<
    [user: AddressLike, stockToken: AddressLike],
    [StockNGNDEX.LiquidityPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceHistory"
  ): TypedContractMethod<[stockToken: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getQuoteNGNToStock"
  ): TypedContractMethod<
    [stockToken: AddressLike, ngnAmountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        stockAmountOut: bigint;
        fee: bigint;
        priceImpact: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteStockToNGN"
  ): TypedContractMethod<
    [stockToken: AddressLike, stockAmountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        ngnAmountOut: bigint;
        fee: bigint;
        priceImpact: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTradingPair"
  ): TypedContractMethod<
    [stockToken: AddressLike],
    [StockNGNDEX.TradingPairStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastPrice"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityPositions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        ngnAmount: bigint;
        stockAmount: bigint;
        liquidityTokens: bigint;
        timestamp: bigint;
        rewardDebt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ngnToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "priceHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      liquidityAmount: BigNumberish,
      minNGNOut: BigNumberish,
      minStockOut: BigNumberish
    ],
    [[bigint, bigint] & { ngnOut: bigint; stockOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedStockTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapNGNForStock"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      ngnAmountIn: BigNumberish,
      minStockAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapStockForNGN"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      stockAmountIn: BigNumberish,
      minNGNAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingPairs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        stockToken: string;
        ngnReserve: bigint;
        stockReserve: bigint;
        totalLiquidity: bigint;
        feeRate: bigint;
        isActive: boolean;
        lastUpdateTime: bigint;
        priceImpactLimit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDEXConfig"
  ): TypedContractMethod<
    [newConfig: StockNGNDEX.DEXConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTradingPair"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      feeRate: BigNumberish,
      priceImpactLimit: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [stockToken: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TradingPairCreated"
  ): TypedContractEvent<
    TradingPairCreatedEvent.InputTuple,
    TradingPairCreatedEvent.OutputTuple,
    TradingPairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyAction(string,address,uint256)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "FeesCollected(address,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "LiquidityAdded(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SwapExecuted(address,address,bool,uint256,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "TradingPairCreated(address,uint256,uint256,uint256)": TypedContractEvent<
      TradingPairCreatedEvent.InputTuple,
      TradingPairCreatedEvent.OutputTuple,
      TradingPairCreatedEvent.OutputObject
    >;
    TradingPairCreated: TypedContractEvent<
      TradingPairCreatedEvent.InputTuple,
      TradingPairCreatedEvent.OutputTuple,
      TradingPairCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
