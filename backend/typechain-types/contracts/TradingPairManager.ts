/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TradingPairManager {
  export type ManagerConfigStruct = {
    defaultFeeRate: BigNumberish;
    defaultLiquidityTarget: BigNumberish;
    defaultRebalanceThreshold: BigNumberish;
    maxPairsPerBatch: BigNumberish;
    autoLiquidityEnabled: boolean;
    emergencyWithdrawDelay: BigNumberish;
  };

  export type ManagerConfigStructOutput = [
    defaultFeeRate: bigint,
    defaultLiquidityTarget: bigint,
    defaultRebalanceThreshold: bigint,
    maxPairsPerBatch: bigint,
    autoLiquidityEnabled: boolean,
    emergencyWithdrawDelay: bigint
  ] & {
    defaultFeeRate: bigint;
    defaultLiquidityTarget: bigint;
    defaultRebalanceThreshold: bigint;
    maxPairsPerBatch: bigint;
    autoLiquidityEnabled: boolean;
    emergencyWithdrawDelay: bigint;
  };

  export type ManagedPairStruct = {
    stockToken: AddressLike;
    symbol: string;
    companyName: string;
    isActive: boolean;
    createdAt: BigNumberish;
    initialNGNLiquidity: BigNumberish;
    initialStockLiquidity: BigNumberish;
    feeRate: BigNumberish;
    targetLiquidityNGN: BigNumberish;
    autoRebalance: boolean;
    lastRebalance: BigNumberish;
  };

  export type ManagedPairStructOutput = [
    stockToken: string,
    symbol: string,
    companyName: string,
    isActive: boolean,
    createdAt: bigint,
    initialNGNLiquidity: bigint,
    initialStockLiquidity: bigint,
    feeRate: bigint,
    targetLiquidityNGN: bigint,
    autoRebalance: boolean,
    lastRebalance: bigint
  ] & {
    stockToken: string;
    symbol: string;
    companyName: string;
    isActive: boolean;
    createdAt: bigint;
    initialNGNLiquidity: bigint;
    initialStockLiquidity: bigint;
    feeRate: bigint;
    targetLiquidityNGN: bigint;
    autoRebalance: boolean;
    lastRebalance: bigint;
  };

  export type NetworkConfigStruct = {
    chainId: BigNumberish;
    networkName: string;
    factoryAddress: AddressLike;
    isSupported: boolean;
    gasLimit: BigNumberish;
    maxSlippage: BigNumberish;
  };

  export type NetworkConfigStructOutput = [
    chainId: bigint,
    networkName: string,
    factoryAddress: string,
    isSupported: boolean,
    gasLimit: bigint,
    maxSlippage: bigint
  ] & {
    chainId: bigint;
    networkName: string;
    factoryAddress: string;
    isSupported: boolean;
    gasLimit: bigint;
    maxSlippage: bigint;
  };
}

export interface TradingPairManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "LIQUIDITY_MANAGER_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "addNetworkConfig"
      | "allManagedTokens"
      | "batchCreatePairs"
      | "batchRebalance"
      | "config"
      | "createManagedPair"
      | "dexContract"
      | "emergencyWithdraw"
      | "getAllManagedTokens"
      | "getManagedPair"
      | "getManagerStats"
      | "getNetworkConfig"
      | "getRoleAdmin"
      | "getSupportedNetworks"
      | "getTokenBySymbol"
      | "grantRole"
      | "hasRole"
      | "liquidityTargets"
      | "managedPairs"
      | "needsRebalancing"
      | "networkConfigs"
      | "ngnToken"
      | "pause"
      | "paused"
      | "rebalanceLiquidity"
      | "rebalanceThresholds"
      | "renounceRole"
      | "revokeRole"
      | "setRebalanceThreshold"
      | "stockFactory"
      | "supportedChainIds"
      | "supportsInterface"
      | "symbolToToken"
      | "totalLiquidityManaged"
      | "totalManagedPairs"
      | "totalVolumeProcessed"
      | "unpause"
      | "updateConfig"
      | "updateManagedPair"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchOperationCompleted"
      | "EmergencyAction"
      | "LiquidityRebalanced"
      | "NetworkConfigUpdated"
      | "PairCreated"
      | "PairUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNetworkConfig",
    values: [BigNumberish, string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allManagedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreatePairs",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRebalance",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createManagedPair",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dexContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllManagedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagedPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedNetworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityTargets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managedPairs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "needsRebalancing",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "networkConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ngnToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceThresholds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stockFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChainIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolToToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityManaged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalManagedPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumeProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [TradingPairManager.ManagerConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManagedPair",
    values: [AddressLike, boolean, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNetworkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allManagedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCreatePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createManagedPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllManagedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagedPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "needsRebalancing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ngnToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stockFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "symbolToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityManaged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalManagedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumeProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManagedPair",
    data: BytesLike
  ): Result;
}

export namespace BatchOperationCompletedEvent {
  export type InputTuple = [operation: string, pairsProcessed: BigNumberish];
  export type OutputTuple = [operation: string, pairsProcessed: bigint];
  export interface OutputObject {
    operation: string;
    pairsProcessed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [
    action: string,
    target: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [action: string, target: string, amount: bigint];
  export interface OutputObject {
    action: string;
    target: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRebalancedEvent {
  export type InputTuple = [
    stockToken: AddressLike,
    oldNGNAmount: BigNumberish,
    newNGNAmount: BigNumberish,
    oldStockAmount: BigNumberish,
    newStockAmount: BigNumberish
  ];
  export type OutputTuple = [
    stockToken: string,
    oldNGNAmount: bigint,
    newNGNAmount: bigint,
    oldStockAmount: bigint,
    newStockAmount: bigint
  ];
  export interface OutputObject {
    stockToken: string;
    oldNGNAmount: bigint;
    newNGNAmount: bigint;
    oldStockAmount: bigint;
    newStockAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NetworkConfigUpdatedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    networkName: string,
    isSupported: boolean
  ];
  export type OutputTuple = [
    chainId: bigint,
    networkName: string,
    isSupported: boolean
  ];
  export interface OutputObject {
    chainId: bigint;
    networkName: string;
    isSupported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCreatedEvent {
  export type InputTuple = [
    stockToken: AddressLike,
    symbol: string,
    initialNGNLiquidity: BigNumberish,
    initialStockLiquidity: BigNumberish,
    feeRate: BigNumberish
  ];
  export type OutputTuple = [
    stockToken: string,
    symbol: string,
    initialNGNLiquidity: bigint,
    initialStockLiquidity: bigint,
    feeRate: bigint
  ];
  export interface OutputObject {
    stockToken: string;
    symbol: string;
    initialNGNLiquidity: bigint;
    initialStockLiquidity: bigint;
    feeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairUpdatedEvent {
  export type InputTuple = [
    stockToken: AddressLike,
    isActive: boolean,
    newFeeRate: BigNumberish
  ];
  export type OutputTuple = [
    stockToken: string,
    isActive: boolean,
    newFeeRate: bigint
  ];
  export interface OutputObject {
    stockToken: string;
    isActive: boolean;
    newFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TradingPairManager extends BaseContract {
  connect(runner?: ContractRunner | null): TradingPairManager;
  waitForDeployment(): Promise<this>;

  interface: TradingPairManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  LIQUIDITY_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  addNetworkConfig: TypedContractMethod<
    [
      chainId: BigNumberish,
      networkName: string,
      factoryAddress: AddressLike,
      gasLimit: BigNumberish,
      maxSlippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allManagedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  batchCreatePairs: TypedContractMethod<
    [
      stockTokens: AddressLike[],
      ngnAmounts: BigNumberish[],
      stockAmounts: BigNumberish[],
      feeRates: BigNumberish[],
      targetLiquidities: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchRebalance: TypedContractMethod<
    [stockTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        defaultFeeRate: bigint;
        defaultLiquidityTarget: bigint;
        defaultRebalanceThreshold: bigint;
        maxPairsPerBatch: bigint;
        autoLiquidityEnabled: boolean;
        emergencyWithdrawDelay: bigint;
      }
    ],
    "view"
  >;

  createManagedPair: TypedContractMethod<
    [
      stockToken: AddressLike,
      initialNGNLiquidity: BigNumberish,
      initialStockLiquidity: BigNumberish,
      feeRate: BigNumberish,
      targetLiquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  dexContract: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllManagedTokens: TypedContractMethod<[], [string[]], "view">;

  getManagedPair: TypedContractMethod<
    [stockToken: AddressLike],
    [TradingPairManager.ManagedPairStructOutput],
    "view"
  >;

  getManagerStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPairs: bigint;
        totalLiquidity: bigint;
        totalVolume: bigint;
        activePairs: bigint;
      }
    ],
    "view"
  >;

  getNetworkConfig: TypedContractMethod<
    [chainId: BigNumberish],
    [TradingPairManager.NetworkConfigStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSupportedNetworks: TypedContractMethod<[], [bigint[]], "view">;

  getTokenBySymbol: TypedContractMethod<[symbol: string], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  liquidityTargets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  managedPairs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        stockToken: string;
        symbol: string;
        companyName: string;
        isActive: boolean;
        createdAt: bigint;
        initialNGNLiquidity: bigint;
        initialStockLiquidity: bigint;
        feeRate: bigint;
        targetLiquidityNGN: bigint;
        autoRebalance: boolean;
        lastRebalance: bigint;
      }
    ],
    "view"
  >;

  needsRebalancing: TypedContractMethod<
    [stockToken: AddressLike],
    [[boolean, bigint]],
    "view"
  >;

  networkConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, bigint] & {
        chainId: bigint;
        networkName: string;
        factoryAddress: string;
        isSupported: boolean;
        gasLimit: bigint;
        maxSlippage: bigint;
      }
    ],
    "view"
  >;

  ngnToken: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rebalanceLiquidity: TypedContractMethod<
    [stockToken: AddressLike],
    [void],
    "nonpayable"
  >;

  rebalanceThresholds: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setRebalanceThreshold: TypedContractMethod<
    [stockToken: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  stockFactory: TypedContractMethod<[], [string], "view">;

  supportedChainIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbolToToken: TypedContractMethod<[arg0: string], [string], "view">;

  totalLiquidityManaged: TypedContractMethod<[], [bigint], "view">;

  totalManagedPairs: TypedContractMethod<[], [bigint], "view">;

  totalVolumeProcessed: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateConfig: TypedContractMethod<
    [newConfig: TradingPairManager.ManagerConfigStruct],
    [void],
    "nonpayable"
  >;

  updateManagedPair: TypedContractMethod<
    [
      stockToken: AddressLike,
      isActive: boolean,
      newFeeRate: BigNumberish,
      newTargetLiquidity: BigNumberish,
      autoRebalance: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIQUIDITY_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addNetworkConfig"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      networkName: string,
      factoryAddress: AddressLike,
      gasLimit: BigNumberish,
      maxSlippage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allManagedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchCreatePairs"
  ): TypedContractMethod<
    [
      stockTokens: AddressLike[],
      ngnAmounts: BigNumberish[],
      stockAmounts: BigNumberish[],
      feeRates: BigNumberish[],
      targetLiquidities: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchRebalance"
  ): TypedContractMethod<[stockTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        defaultFeeRate: bigint;
        defaultLiquidityTarget: bigint;
        defaultRebalanceThreshold: bigint;
        maxPairsPerBatch: bigint;
        autoLiquidityEnabled: boolean;
        emergencyWithdrawDelay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createManagedPair"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      initialNGNLiquidity: BigNumberish,
      initialStockLiquidity: BigNumberish,
      feeRate: BigNumberish,
      targetLiquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dexContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllManagedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getManagedPair"
  ): TypedContractMethod<
    [stockToken: AddressLike],
    [TradingPairManager.ManagedPairStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManagerStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalPairs: bigint;
        totalLiquidity: bigint;
        totalVolume: bigint;
        activePairs: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNetworkConfig"
  ): TypedContractMethod<
    [chainId: BigNumberish],
    [TradingPairManager.NetworkConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSupportedNetworks"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTokenBySymbol"
  ): TypedContractMethod<[symbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityTargets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "managedPairs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        stockToken: string;
        symbol: string;
        companyName: string;
        isActive: boolean;
        createdAt: bigint;
        initialNGNLiquidity: bigint;
        initialStockLiquidity: bigint;
        feeRate: bigint;
        targetLiquidityNGN: bigint;
        autoRebalance: boolean;
        lastRebalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "needsRebalancing"
  ): TypedContractMethod<
    [stockToken: AddressLike],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "networkConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, bigint] & {
        chainId: bigint;
        networkName: string;
        factoryAddress: string;
        isSupported: boolean;
        gasLimit: bigint;
        maxSlippage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ngnToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rebalanceLiquidity"
  ): TypedContractMethod<[stockToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rebalanceThresholds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceThreshold"
  ): TypedContractMethod<
    [stockToken: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stockFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportedChainIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbolToToken"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "totalLiquidityManaged"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalManagedPairs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolumeProcessed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [newConfig: TradingPairManager.ManagerConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateManagedPair"
  ): TypedContractMethod<
    [
      stockToken: AddressLike,
      isActive: boolean,
      newFeeRate: BigNumberish,
      newTargetLiquidity: BigNumberish,
      autoRebalance: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchOperationCompleted"
  ): TypedContractEvent<
    BatchOperationCompletedEvent.InputTuple,
    BatchOperationCompletedEvent.OutputTuple,
    BatchOperationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRebalanced"
  ): TypedContractEvent<
    LiquidityRebalancedEvent.InputTuple,
    LiquidityRebalancedEvent.OutputTuple,
    LiquidityRebalancedEvent.OutputObject
  >;
  getEvent(
    key: "NetworkConfigUpdated"
  ): TypedContractEvent<
    NetworkConfigUpdatedEvent.InputTuple,
    NetworkConfigUpdatedEvent.OutputTuple,
    NetworkConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PairCreated"
  ): TypedContractEvent<
    PairCreatedEvent.InputTuple,
    PairCreatedEvent.OutputTuple,
    PairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PairUpdated"
  ): TypedContractEvent<
    PairUpdatedEvent.InputTuple,
    PairUpdatedEvent.OutputTuple,
    PairUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchOperationCompleted(string,uint256)": TypedContractEvent<
      BatchOperationCompletedEvent.InputTuple,
      BatchOperationCompletedEvent.OutputTuple,
      BatchOperationCompletedEvent.OutputObject
    >;
    BatchOperationCompleted: TypedContractEvent<
      BatchOperationCompletedEvent.InputTuple,
      BatchOperationCompletedEvent.OutputTuple,
      BatchOperationCompletedEvent.OutputObject
    >;

    "EmergencyAction(string,address,uint256)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "LiquidityRebalanced(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityRebalancedEvent.InputTuple,
      LiquidityRebalancedEvent.OutputTuple,
      LiquidityRebalancedEvent.OutputObject
    >;
    LiquidityRebalanced: TypedContractEvent<
      LiquidityRebalancedEvent.InputTuple,
      LiquidityRebalancedEvent.OutputTuple,
      LiquidityRebalancedEvent.OutputObject
    >;

    "NetworkConfigUpdated(uint256,string,bool)": TypedContractEvent<
      NetworkConfigUpdatedEvent.InputTuple,
      NetworkConfigUpdatedEvent.OutputTuple,
      NetworkConfigUpdatedEvent.OutputObject
    >;
    NetworkConfigUpdated: TypedContractEvent<
      NetworkConfigUpdatedEvent.InputTuple,
      NetworkConfigUpdatedEvent.OutputTuple,
      NetworkConfigUpdatedEvent.OutputObject
    >;

    "PairCreated(address,string,uint256,uint256,uint256)": TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
    PairCreated: TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;

    "PairUpdated(address,bool,uint256)": TypedContractEvent<
      PairUpdatedEvent.InputTuple,
      PairUpdatedEvent.OutputTuple,
      PairUpdatedEvent.OutputObject
    >;
    PairUpdated: TypedContractEvent<
      PairUpdatedEvent.InputTuple,
      PairUpdatedEvent.OutputTuple,
      PairUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
