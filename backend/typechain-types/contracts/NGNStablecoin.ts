/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NGNStablecoin {
  export type StablecoinConfigStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
    maxSupply: BigNumberish;
    mintingCap: BigNumberish;
    lastMintReset: BigNumberish;
    currentDayMinted: BigNumberish;
    mintingEnabled: boolean;
    burningEnabled: boolean;
    transfersEnabled: boolean;
  };

  export type StablecoinConfigStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint,
    maxSupply: bigint,
    mintingCap: bigint,
    lastMintReset: bigint,
    currentDayMinted: bigint,
    mintingEnabled: boolean,
    burningEnabled: boolean,
    transfersEnabled: boolean
  ] & {
    name: string;
    symbol: string;
    decimals: bigint;
    maxSupply: bigint;
    mintingCap: bigint;
    lastMintReset: bigint;
    currentDayMinted: bigint;
    mintingEnabled: boolean;
    burningEnabled: boolean;
    transfersEnabled: boolean;
  };
}

export interface NGNStablecoinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BURNER_ROLE"
      | "COMPLIANCE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEX_ROLE"
      | "MINTER_ROLE"
      | "PAUSER_ROLE"
      | "allowance"
      | "approve"
      | "authorizeDEXContracts"
      | "authorizedDEXContracts"
      | "balanceOf"
      | "batchMint"
      | "blacklisted"
      | "burn"
      | "burnFrom"
      | "canTransfer"
      | "config"
      | "dailyTransferAmount"
      | "dailyTransferLimit"
      | "decimals"
      | "dexTransferLimit"
      | "emergencyWithdraw"
      | "getConfig"
      | "getRemainingDailyTransferCapacity"
      | "getRemainingMintingCapacity"
      | "getRoleAdmin"
      | "getTokenInfo"
      | "grantRole"
      | "hasRole"
      | "lastDailyReset"
      | "lastTransferTime"
      | "maxTransferAmount"
      | "minTransferAmount"
      | "mint"
      | "name"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setComplianceStatus"
      | "setDEXTransferLimit"
      | "setTransferCooldown"
      | "setTransferLimits"
      | "setWhitelistRequired"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferCooldown"
      | "transferFrom"
      | "unpause"
      | "updateConfig"
      | "whitelistRequired"
      | "whitelisted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ComplianceStatusUpdated"
      | "DEXContractAuthorized"
      | "EmergencyAction"
      | "MintingCapReset"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StablecoinConfigUpdated"
      | "Transfer"
      | "TransferLimitsUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DEX_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeDEXContracts",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedDEXContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dailyTransferAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyTransferLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dexTransferLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRemainingDailyTransferCapacity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingMintingCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDailyReset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTransferTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransferAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTransferAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setComplianceStatus",
    values: [AddressLike[], boolean[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDEXTransferLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferLimits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRequired",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [NGNStablecoin.StablecoinConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BURNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DEX_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDEXContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedDEXContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyTransferLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexTransferLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingDailyTransferCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingMintingCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDailyReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTransferTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setComplianceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDEXTransferLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComplianceStatusUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    blacklisted: boolean,
    whitelisted: boolean
  ];
  export type OutputTuple = [
    account: string,
    blacklisted: boolean,
    whitelisted: boolean
  ];
  export interface OutputObject {
    account: string;
    blacklisted: boolean;
    whitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DEXContractAuthorizedEvent {
  export type InputTuple = [dexContract: AddressLike, authorized: boolean];
  export type OutputTuple = [dexContract: string, authorized: boolean];
  export interface OutputObject {
    dexContract: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [
    action: string,
    target: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [action: string, target: string, amount: bigint];
  export interface OutputObject {
    action: string;
    target: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingCapResetEvent {
  export type InputTuple = [newCap: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [newCap: bigint, timestamp: bigint];
  export interface OutputObject {
    newCap: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StablecoinConfigUpdatedEvent {
  export type InputTuple = [
    maxSupply: BigNumberish,
    mintingCap: BigNumberish,
    mintingEnabled: boolean,
    burningEnabled: boolean,
    transfersEnabled: boolean
  ];
  export type OutputTuple = [
    maxSupply: bigint,
    mintingCap: bigint,
    mintingEnabled: boolean,
    burningEnabled: boolean,
    transfersEnabled: boolean
  ];
  export interface OutputObject {
    maxSupply: bigint;
    mintingCap: bigint;
    mintingEnabled: boolean;
    burningEnabled: boolean;
    transfersEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferLimitsUpdatedEvent {
  export type InputTuple = [
    minAmount: BigNumberish,
    maxAmount: BigNumberish,
    dailyLimit: BigNumberish
  ];
  export type OutputTuple = [
    minAmount: bigint,
    maxAmount: bigint,
    dailyLimit: bigint
  ];
  export interface OutputObject {
    minAmount: bigint;
    maxAmount: bigint;
    dailyLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NGNStablecoin extends BaseContract {
  connect(runner?: ContractRunner | null): NGNStablecoin;
  waitForDeployment(): Promise<this>;

  interface: NGNStablecoinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BURNER_ROLE: TypedContractMethod<[], [string], "view">;

  COMPLIANCE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEX_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizeDEXContracts: TypedContractMethod<
    [dexContracts: AddressLike[], authorized: boolean[]],
    [void],
    "nonpayable"
  >;

  authorizedDEXContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  batchMint: TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  blacklisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  canTransfer: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [[boolean, string]],
    "view"
  >;

  config: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        symbol: string;
        decimals: bigint;
        maxSupply: bigint;
        mintingCap: bigint;
        lastMintReset: bigint;
        currentDayMinted: bigint;
        mintingEnabled: boolean;
        burningEnabled: boolean;
        transfersEnabled: boolean;
      }
    ],
    "view"
  >;

  dailyTransferAmount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  dailyTransferLimit: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  dexTransferLimit: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<
    [],
    [NGNStablecoin.StablecoinConfigStructOutput],
    "view"
  >;

  getRemainingDailyTransferCapacity: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getRemainingMintingCapacity: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenInfo: TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean, boolean] & {
        name: string;
        symbol: string;
        decimals: bigint;
        totalSupply: bigint;
        maxSupply: bigint;
        mintingEnabled: boolean;
        burningEnabled: boolean;
        transfersEnabled: boolean;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastDailyReset: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastTransferTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxTransferAmount: TypedContractMethod<[], [bigint], "view">;

  minTransferAmount: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setComplianceStatus: TypedContractMethod<
    [accounts: AddressLike[], _blacklisted: boolean[], _whitelisted: boolean[]],
    [void],
    "nonpayable"
  >;

  setDEXTransferLimit: TypedContractMethod<
    [_dexLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferCooldown: TypedContractMethod<
    [_cooldown: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferLimits: TypedContractMethod<
    [
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _dailyLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setWhitelistRequired: TypedContractMethod<
    [_required: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferCooldown: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateConfig: TypedContractMethod<
    [_newConfig: NGNStablecoin.StablecoinConfigStruct],
    [void],
    "nonpayable"
  >;

  whitelistRequired: TypedContractMethod<[], [boolean], "view">;

  whitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BURNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEX_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeDEXContracts"
  ): TypedContractMethod<
    [dexContracts: AddressLike[], authorized: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedDEXContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchMint"
  ): TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canTransfer"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [[boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        symbol: string;
        decimals: bigint;
        maxSupply: bigint;
        mintingCap: bigint;
        lastMintReset: bigint;
        currentDayMinted: bigint;
        mintingEnabled: boolean;
        burningEnabled: boolean;
        transfersEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dailyTransferAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyTransferLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dexTransferLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [NGNStablecoin.StablecoinConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingDailyTransferCapacity"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingMintingCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean, boolean] & {
        name: string;
        symbol: string;
        decimals: bigint;
        totalSupply: bigint;
        maxSupply: bigint;
        mintingEnabled: boolean;
        burningEnabled: boolean;
        transfersEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastDailyReset"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTransferTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTransferAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTransferAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setComplianceStatus"
  ): TypedContractMethod<
    [accounts: AddressLike[], _blacklisted: boolean[], _whitelisted: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDEXTransferLimit"
  ): TypedContractMethod<[_dexLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferCooldown"
  ): TypedContractMethod<[_cooldown: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferLimits"
  ): TypedContractMethod<
    [
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _dailyLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistRequired"
  ): TypedContractMethod<[_required: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [_newConfig: NGNStablecoin.StablecoinConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ComplianceStatusUpdated"
  ): TypedContractEvent<
    ComplianceStatusUpdatedEvent.InputTuple,
    ComplianceStatusUpdatedEvent.OutputTuple,
    ComplianceStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DEXContractAuthorized"
  ): TypedContractEvent<
    DEXContractAuthorizedEvent.InputTuple,
    DEXContractAuthorizedEvent.OutputTuple,
    DEXContractAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "MintingCapReset"
  ): TypedContractEvent<
    MintingCapResetEvent.InputTuple,
    MintingCapResetEvent.OutputTuple,
    MintingCapResetEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StablecoinConfigUpdated"
  ): TypedContractEvent<
    StablecoinConfigUpdatedEvent.InputTuple,
    StablecoinConfigUpdatedEvent.OutputTuple,
    StablecoinConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferLimitsUpdated"
  ): TypedContractEvent<
    TransferLimitsUpdatedEvent.InputTuple,
    TransferLimitsUpdatedEvent.OutputTuple,
    TransferLimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ComplianceStatusUpdated(address,bool,bool)": TypedContractEvent<
      ComplianceStatusUpdatedEvent.InputTuple,
      ComplianceStatusUpdatedEvent.OutputTuple,
      ComplianceStatusUpdatedEvent.OutputObject
    >;
    ComplianceStatusUpdated: TypedContractEvent<
      ComplianceStatusUpdatedEvent.InputTuple,
      ComplianceStatusUpdatedEvent.OutputTuple,
      ComplianceStatusUpdatedEvent.OutputObject
    >;

    "DEXContractAuthorized(address,bool)": TypedContractEvent<
      DEXContractAuthorizedEvent.InputTuple,
      DEXContractAuthorizedEvent.OutputTuple,
      DEXContractAuthorizedEvent.OutputObject
    >;
    DEXContractAuthorized: TypedContractEvent<
      DEXContractAuthorizedEvent.InputTuple,
      DEXContractAuthorizedEvent.OutputTuple,
      DEXContractAuthorizedEvent.OutputObject
    >;

    "EmergencyAction(string,address,uint256)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "MintingCapReset(uint256,uint256)": TypedContractEvent<
      MintingCapResetEvent.InputTuple,
      MintingCapResetEvent.OutputTuple,
      MintingCapResetEvent.OutputObject
    >;
    MintingCapReset: TypedContractEvent<
      MintingCapResetEvent.InputTuple,
      MintingCapResetEvent.OutputTuple,
      MintingCapResetEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StablecoinConfigUpdated(uint256,uint256,bool,bool,bool)": TypedContractEvent<
      StablecoinConfigUpdatedEvent.InputTuple,
      StablecoinConfigUpdatedEvent.OutputTuple,
      StablecoinConfigUpdatedEvent.OutputObject
    >;
    StablecoinConfigUpdated: TypedContractEvent<
      StablecoinConfigUpdatedEvent.InputTuple,
      StablecoinConfigUpdatedEvent.OutputTuple,
      StablecoinConfigUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferLimitsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      TransferLimitsUpdatedEvent.InputTuple,
      TransferLimitsUpdatedEvent.OutputTuple,
      TransferLimitsUpdatedEvent.OutputObject
    >;
    TransferLimitsUpdated: TypedContractEvent<
      TransferLimitsUpdatedEvent.InputTuple,
      TransferLimitsUpdatedEvent.OutputTuple,
      TransferLimitsUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
