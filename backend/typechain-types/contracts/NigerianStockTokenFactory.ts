/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NigerianStockTokenFactory {
  export type TokenDeploymentDataStruct = {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: BigNumberish;
    initialSupply: BigNumberish;
  };

  export type TokenDeploymentDataStructOutput = [
    name: string,
    symbol: string,
    stockSymbol: string,
    companyName: string,
    maxSupply: bigint,
    initialSupply: bigint
  ] & {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: bigint;
    initialSupply: bigint;
  };

  export type TokenInfoStruct = {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: BigNumberish;
    tokenAddress: AddressLike;
  };

  export type TokenInfoStructOutput = [
    name: string,
    symbol: string,
    stockSymbol: string,
    companyName: string,
    maxSupply: bigint,
    tokenAddress: string
  ] & {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: bigint;
    tokenAddress: string;
  };
}

export interface NigerianStockTokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEPLOYER_ROLE"
      | "PAUSER_ROLE"
      | "batchDeployStockTokens"
      | "deployStockToken"
      | "deployedSymbols"
      | "getAllDeployedSymbols"
      | "getDeployedTokensPaginated"
      | "getFactoryStats"
      | "getRoleAdmin"
      | "getTokenAddress"
      | "getTokenCount"
      | "getTokenInfo"
      | "grantRole"
      | "hasRole"
      | "isValidStockToken"
      | "isValidToken"
      | "pause"
      | "paused"
      | "removeTokenFromRegistry"
      | "renounceRole"
      | "revokeRole"
      | "stockTokens"
      | "supportsInterface"
      | "totalDeployedTokens"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchDeploymentCompleted"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StockTokenDeployed"
      | "StockTokenUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPLOYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeployStockTokens",
    values: [NigerianStockTokenFactory.TokenDeploymentDataStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployStockToken",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedSymbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDeployedSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedTokensPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidStockToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stockTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeployedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPLOYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDeployStockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployStockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDeployedSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedTokensPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidStockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeployedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BatchDeploymentCompletedEvent {
  export type InputTuple = [totalTokens: BigNumberish];
  export type OutputTuple = [totalTokens: bigint];
  export interface OutputObject {
    totalTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StockTokenDeployedEvent {
  export type InputTuple = [
    symbol: string,
    tokenAddress: AddressLike,
    name: string,
    initialSupply: BigNumberish,
    admin: AddressLike
  ];
  export type OutputTuple = [
    symbol: string,
    tokenAddress: string,
    name: string,
    initialSupply: bigint,
    admin: string
  ];
  export interface OutputObject {
    symbol: string;
    tokenAddress: string;
    name: string;
    initialSupply: bigint;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StockTokenUpdatedEvent {
  export type InputTuple = [symbol: string, tokenAddress: AddressLike];
  export type OutputTuple = [symbol: string, tokenAddress: string];
  export interface OutputObject {
    symbol: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NigerianStockTokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NigerianStockTokenFactory;
  waitForDeployment(): Promise<this>;

  interface: NigerianStockTokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEPLOYER_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  batchDeployStockTokens: TypedContractMethod<
    [
      _tokenData: NigerianStockTokenFactory.TokenDeploymentDataStruct[],
      _tokenAdmin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  deployStockToken: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _stockSymbol: string,
      _companyName: string,
      _maxSupply: BigNumberish,
      _initialSupply: BigNumberish,
      _tokenAdmin: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  deployedSymbols: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllDeployedSymbols: TypedContractMethod<[], [string[]], "view">;

  getDeployedTokensPaginated: TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [[string[], string[]] & { symbols: string[]; addresses: string[] }],
    "view"
  >;

  getFactoryStats: TypedContractMethod<
    [],
    [
      [bigint, bigint] & { _totalDeployedTokens: bigint; _totalSymbols: bigint }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenAddress: TypedContractMethod<[_symbol: string], [string], "view">;

  getTokenCount: TypedContractMethod<[], [bigint], "view">;

  getTokenInfo: TypedContractMethod<
    [_symbol: string],
    [NigerianStockTokenFactory.TokenInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isValidStockToken: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isValidToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeTokenFromRegistry: TypedContractMethod<
    [_symbol: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  stockTokens: TypedContractMethod<[arg0: string], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalDeployedTokens: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEPLOYER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchDeployStockTokens"
  ): TypedContractMethod<
    [
      _tokenData: NigerianStockTokenFactory.TokenDeploymentDataStruct[],
      _tokenAdmin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployStockToken"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _stockSymbol: string,
      _companyName: string,
      _maxSupply: BigNumberish,
      _initialSupply: BigNumberish,
      _tokenAdmin: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedSymbols"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllDeployedSymbols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDeployedTokensPaginated"
  ): TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [[string[], string[]] & { symbols: string[]; addresses: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactoryStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & { _totalDeployedTokens: bigint; _totalSymbols: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAddress"
  ): TypedContractMethod<[_symbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [_symbol: string],
    [NigerianStockTokenFactory.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidStockToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeTokenFromRegistry"
  ): TypedContractMethod<[_symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stockTokens"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDeployedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BatchDeploymentCompleted"
  ): TypedContractEvent<
    BatchDeploymentCompletedEvent.InputTuple,
    BatchDeploymentCompletedEvent.OutputTuple,
    BatchDeploymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StockTokenDeployed"
  ): TypedContractEvent<
    StockTokenDeployedEvent.InputTuple,
    StockTokenDeployedEvent.OutputTuple,
    StockTokenDeployedEvent.OutputObject
  >;
  getEvent(
    key: "StockTokenUpdated"
  ): TypedContractEvent<
    StockTokenUpdatedEvent.InputTuple,
    StockTokenUpdatedEvent.OutputTuple,
    StockTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchDeploymentCompleted(uint256)": TypedContractEvent<
      BatchDeploymentCompletedEvent.InputTuple,
      BatchDeploymentCompletedEvent.OutputTuple,
      BatchDeploymentCompletedEvent.OutputObject
    >;
    BatchDeploymentCompleted: TypedContractEvent<
      BatchDeploymentCompletedEvent.InputTuple,
      BatchDeploymentCompletedEvent.OutputTuple,
      BatchDeploymentCompletedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StockTokenDeployed(string,address,string,uint256,address)": TypedContractEvent<
      StockTokenDeployedEvent.InputTuple,
      StockTokenDeployedEvent.OutputTuple,
      StockTokenDeployedEvent.OutputObject
    >;
    StockTokenDeployed: TypedContractEvent<
      StockTokenDeployedEvent.InputTuple,
      StockTokenDeployedEvent.OutputTuple,
      StockTokenDeployedEvent.OutputObject
    >;

    "StockTokenUpdated(string,address)": TypedContractEvent<
      StockTokenUpdatedEvent.InputTuple,
      StockTokenUpdatedEvent.OutputTuple,
      StockTokenUpdatedEvent.OutputObject
    >;
    StockTokenUpdated: TypedContractEvent<
      StockTokenUpdatedEvent.InputTuple,
      StockTokenUpdatedEvent.OutputTuple,
      StockTokenUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
